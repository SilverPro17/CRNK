import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
import matplotlib.pyplot as plt

print("üì∞ Iniciando Exerc√≠cio 2: Classifica√ß√£o Reuters")
print("="*50)

# Imports necess√°rios
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.datasets import reuters
from tensorflow.keras.utils import to_categorical
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report

print("‚úÖ Bibliotecas importadas com sucesso!")

# 1. CARREGAMENTO E PREPARA√á√ÉO DOS DADOS
print("\nüì• Carregando dataset Reuters...")
(x_train, y_train), (x_test, y_test) = reuters.load_data(num_words=10000)

print(f"Exemplos de treino: {len(x_train)}")
print(f"Exemplos de teste: {len(x_test)}")
print(f"N√∫mero de categorias: {len(set(y_train))}")

# Verificar distribui√ß√£o das classes
unique, counts = np.unique(y_train, return_counts=True)
print(f"Primeiras 5 categorias mais frequentes:")
for i in range(5):
    print(f"  Categoria {unique[i]}: {counts[i]} exemplos")

# 2. FUN√á√ÉO DE PR√â-PROCESSAMENTO (DEFINIDA AQUI!)
def vectorizar_sequences(sequences, dimension=10000):
    """
    Converte listas de integers em matriz bin√°ria (one-hot)
    
    Args:
        sequences: Lista de listas de integers
        dimension: Tamanho do vocabul√°rio
    
    Returns:
        Matriz numpy bin√°ria
    """
    print(f"üîÑ Vetorizando {len(sequences)} sequ√™ncias...")
    results = np.zeros((len(sequences), dimension))
    for i, sequence in enumerate(sequences):
        if sequence:  # Verificar se a sequ√™ncia n√£o est√° vazia
            results[i, sequence] = 1.0
    print("‚úÖ Vetoriza√ß√£o conclu√≠da!")
    return results

# 3. PR√â-PROCESSAMENTO DOS DADOS
print("\nüîß Pr√©-processando dados...")

# Vectorizar dados
x_train = vectorizar_sequences(x_train)
x_test = vectorizar_sequences(x_test)

# Converter labels para one-hot encoding
print("üîÑ Convertendo labels para one-hot...")
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

print(f"‚úÖ Formato dos dados de treino: {x_train.shape}")
print(f"‚úÖ Formato dos labels (one-hot): {y_train.shape}")

# 4. CONSTRU√á√ÉO DO MODELO
print("\nüèóÔ∏è Construindo modelo de rede neural...")
model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(10000,), name='camada_1'),
    layers.Dense(64, activation='relu', name='camada_2'),
    layers.Dense(46, activation='softmax', name='camada_saida')  # 46 categorias
])

print("‚úÖ Modelo constru√≠do!")

# 5. COMPILA√á√ÉO DO MODELO
print("\n‚öôÔ∏è Compilando modelo...")
model.compile(
    optimizer='rmsprop',
    loss='categorical_crossentropy',  # Para classifica√ß√£o multiclasse
    metrics=['accuracy']
)

# Mostrar arquitetura do modelo
print("\nüìã Arquitetura do modelo:")
model.summary()

# 6. CRIA√á√ÉO DE CONJUNTO DE VALIDA√á√ÉO
print("\nüìä Criando conjuntos de valida√ß√£o...")
x_val = x_train[:1000]
partial_x_train = x_train[1000:]
y_val = y_train[:1000]
partial_y_train = y_train[1000:]

print(f"‚úÖ Treino: {partial_x_train.shape[0]} exemplos")
print(f"‚úÖ Valida√ß√£o: {x_val.shape[0]} exemplos")
print(f"‚úÖ Teste: {x_test.shape[0]} exemplos")

# 7. TREINAMENTO DO MODELO
print("\nüöÄ Iniciando treinamento...")
print("‚è∞ Isso pode levar alguns minutos...")

history = model.fit(
    partial_x_train,
    partial_y_train,
    epochs=20,
    batch_size=512,
    validation_data=(x_val, y_val),
    verbose=1
)

print("üéâ Treinamento conclu√≠do!")

# 8. AVALIA√á√ÉO DO MODELO
print("\nüìà Avaliando modelo no conjunto de teste...")
test_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=0)
print(f"üéØ Acur√°cia no conjunto de teste: {test_accuracy:.4f} ({test_accuracy*100:.2f}%)")

# 9. FUN√á√ÉO PARA VISUALIZAR RESULTADOS
def plot_training_history(history):
    """Plota gr√°ficos de loss e accuracy durante o treinamento"""
    print("\nüìä Gerando gr√°ficos de treinamento...")
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Loss
    ax1.plot(history.history['loss'], 'b-', label='Treino', linewidth=2)
    ax1.plot(history.history['val_loss'], 'r-', label='Valida√ß√£o', linewidth=2)
    ax1.set_title('Loss do Modelo', fontsize=14, fontweight='bold')
    ax1.set_xlabel('√âpoca')
    ax1.set_ylabel('Loss')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Accuracy
    ax2.plot(history.history['accuracy'], 'b-', label='Treino', linewidth=2)
    ax2.plot(history.history['val_accuracy'], 'r-', label='Valida√ß√£o', linewidth=2)
    ax2.set_title('Acur√°cia do Modelo', fontsize=14, fontweight='bold')
    ax2.set_xlabel('√âpoca')
    ax2.set_ylabel('Acur√°cia')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('reuters_training_history.png', dpi=300, bbox_inches='tight')
    print("‚úÖ Gr√°fico salvo como 'reuters_training_history.png'")
    plt.show()

# Visualizar hist√≥rico de treinamento
plot_training_history(history)

# 10. AN√ÅLISE DETALHADA DAS PREDI√á√ïES
print("\nüîç Analisando predi√ß√µes...")
predictions = model.predict(x_test, verbose=0)

# Converter predi√ß√µes para classes
predicted_classes = np.argmax(predictions, axis=1)
true_classes = np.argmax(y_test, axis=1)

# Calcular accuracy manualmente para verifica√ß√£o
correct_predictions = np.sum(predicted_classes == true_classes)
total_predictions = len(true_classes)
manual_accuracy = correct_predictions / total_predictions

print(f"‚úÖ Predi√ß√µes corretas: {correct_predictions}/{total_predictions}")
print(f"‚úÖ Acur√°cia calculada manualmente: {manual_accuracy:.4f}")

# 11. MOSTRAR EXEMPLOS DE PREDI√á√ïES
print("\nüìã Exemplos de predi√ß√µes:")
print("-" * 60)
for i in range(10):
    is_correct = predicted_classes[i] == true_classes[i]
    confidence = predictions[i][predicted_classes[i]]
    status = "‚úÖ CORRETO" if is_correct else "‚ùå INCORRETO"
    
    print(f"Exemplo {i+1:2d}: Real={true_classes[i]:2d} | "
          f"Predito={predicted_classes[i]:2d} | "
          f"Confian√ßa={confidence:.3f} | {status}")

# 12. ESTAT√çSTICAS GERAIS
print(f"\nüìä ESTAT√çSTICAS FINAIS:")
print("=" * 40)
print(f"üéØ Acur√°cia Final: {test_accuracy:.4f} ({test_accuracy*100:.2f}%)")
print(f"üìâ Loss Final: {test_loss:.4f}")
print(f"üìà Melhoria poss√≠vel: {(1-test_accuracy)*100:.1f} pontos percentuais")

# 13. SALVAR MODELO (OPCIONAL)
try:
    model.save('reuters_classifier_model.h5')
    print(f"üíæ Modelo salvo como 'reuters_classifier_model.h5'")
except Exception as e:
    print(f"‚ö†Ô∏è N√£o foi poss√≠vel salvar o modelo: {e}")

# 14. RELAT√ìRIO DE CLASSIFICA√á√ÉO (TOP 10 CLASSES)
print(f"\nüìã Relat√≥rio detalhado (classes mais comuns):")
print("-" * 50)

# Encontrar as 10 classes mais comuns
class_counts = np.bincount(true_classes)
top_10_classes = np.argsort(class_counts)[-10:][::-1]

# Filtrar apenas exemplos das top 10 classes
mask = np.isin(true_classes, top_10_classes) & np.isin(predicted_classes, top_10_classes)

if np.sum(mask) > 10:  # Se temos exemplos suficientes
    try:
        report = classification_report(
            true_classes[mask], 
            predicted_classes[mask],
            target_names=[f'Categoria {i}' for i in top_10_classes],
            digits=3
        )
        print(report)
    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel gerar relat√≥rio detalhado: {e}")

print(f"\nüéâ EXERC√çCIO 2 REUTERS CONCLU√çDO COM SUCESSO!")
print("=" * 50)